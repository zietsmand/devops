
pid /run/nginx.pid;

user www-data;

# Might be good practice to log docker errors to sterr. However makes debugging hard. So rather putting it into a file.
# error_log /dev/stderr info;
error_log /var/log/nginx/nginx_error.log  warn;

# Set one worker process per core. 
worker_processes auto;

# a system with 4 cores, this would allow us to have 4 x 2048 = 8192 simultaneous connections!
events {
  worker_connections 2048;
  multi_accept on;
  use epoll;
}

http {
  server_tokens off;

  #sendfile on;

  #tcp_nopush on;
  #tcp_nodelay on;

  #keepalive_timeout 15;

  #types_hash_max_size 2048;

  client_max_body_size 20M;

  # Don't let Ngnix cache. Always serve. Otherwise webpack build process might complain with ERR_CONTENT_LENGTH_MISMATCH 200 (OK) on rebuild
  #proxy_max_temp_file_size 0;
  #proxy_buffering off;

  #efault_type application/octet-stream;

  gzip on;
  gzip_disable "msie6";

  #open_file_cache max=100;

  log_format docker '$remote_addr $remote_user $status "$request" "$http_referer" "$http_user_agent" ';

  access_log /dev/stdout docker;

  include /etc/nginx/mime.types;

  server {
    listen 80;
    listen [::]:80;

    server_name $SERVER_NAME $SERVER_ALIAS;

    root $SERVER_ROOT;

    index index.php;

    location / {
      try_files $uri $uri/ /index.php$is_args$args;
    }

    location ~ \.php$ {
      try_files $uri /index.php =404;
      fastcgi_pass unix:/run/php-fpm.sock;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      include fastcgi_params;
    }

    location ~ /\.ht {
      deny all;
    }

    location ~ ^/favicon {
      log_not_found on;
      access_log off;
    }
  }
}
