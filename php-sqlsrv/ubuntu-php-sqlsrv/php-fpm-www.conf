[global]
daemonize = no
; stdout and stderr (/proc/self/fd/2) is routed to /proc/1/fd/2 via supervisord, as in process logs are output to docker output
error_log = /dev/stderr
log_level = notice

[www]
user = www-data
group = www-data

; Ignore these settings - dodgy php-fpm error handling is worked around
; with the error_log directive below
; access.log = /dev/stderr
; access.format = "%R %u %s \"%m %r\""

; Turning this on results in a double up of error logs, once for the worker, and secondarily for php-fpm. Instead we skip both and go straight to /proc/1/fd/2 via error_log set below.
catch_workers_output = no

clear_env = no

listen = /run/php-fpm.sock
listen.owner = www-data
listen.group = www-data
listen.mode = 0660

pm = ondemand
pm.process_idle_timeout = 10s
pm.max_requests = 1000

;  If our cloud server has 4 GB RAM and MySQL is running as well. 
;  Assuming 60 Mb per process. That consumes at least 1 GB. Our best aim is to get 4 - 1 - 0,5 (margin) GB = 2,5 GB RAM or 2560 Mb.
;  pm.max_children = 40
;  pm.start_servers = 15
;  pm.min_spare_servers = 15
;  pm.max_spare_servers = 25

;  Be a bit more aggressive!
pm.max_children = 80
pm.start_servers = 30
pm.min_spare_servers = 30
pm.max_spare_servers = 60

; Admin settings can't be overridden
php_admin_flag[log_errors] = on
php_admin_value[log_errors_max_len] = 4096
php_admin_value[error_log] = /proc/1/fd/2

; Normals can be
php_flag[display_errors] = off
php_value[date.timezone] = UTC

; this should match FPM_PROCESS_MEMORY_MB in /auto-fpm.sh
php_value[memory_limit] = 128M
php_value[upload_max_filesize] = 512M
php_value[post_max_size] = 20M
php_value[default_socket_timeout] = 300
